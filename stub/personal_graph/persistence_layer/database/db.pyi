import abc
from abc import ABC, abstractmethod
import libsql_experimental as libsql  # type: ignore
from graphviz import Digraph  # type: ignore
from personal_graph.models import Edge as Edge, Node as Node
from typing import Any, Dict, List, Callable

CursorExecFunction = Callable[[libsql.Cursor, libsql.Connection], Any]

class DB(ABC, metaclass=abc.ABCMeta):
    @abstractmethod
    def initialize(self): ...
    @abstractmethod
    def __eq__(self, other): ...
    @abstractmethod
    def save(self): ...
    @abstractmethod
    def fetch_node_embed_id(self, node_id: Any): ...
    @abstractmethod
    def fetch_edge_embed_ids(self, id: Any): ...
    @abstractmethod
    def all_connected_nodes(self, node_or_edge: Node | Edge) -> Any: ...
    @abstractmethod
    def get_connections(self, identifier: Any) -> CursorExecFunction: ...
    @abstractmethod
    def search_edge(self, source: Any, target: Any, attributes: Dict): ...
    @abstractmethod
    def add_node(self, label: str, attribute: Dict, id: Any): ...
    @abstractmethod
    def add_edge(
        self, source: Any, target: Any, label: str, attributes: Dict
    ) -> None: ...
    @abstractmethod
    def update_node(self, node: Node): ...
    @abstractmethod
    def remove_node(self, id: Any) -> None: ...
    @abstractmethod
    def search_node(self, node_id: Any) -> Any: ...
    @abstractmethod
    def search_node_label(self, node_id: Any) -> Any: ...
    @abstractmethod
    def traverse(
        self, source: Any, target: Any | None = None, with_bodies: bool = False
    ) -> List: ...
    @abstractmethod
    def fetch_node_id(self, id: Any): ...
    @abstractmethod
    def find_nodes_by_label(self, label: str): ...
    @abstractmethod
    def graphviz_visualize(
        self,
        dot_file: str | None = None,
        path: List[Any] = [],
        connections: Any = None,
        format: str = "png",
        exclude_node_keys: List[str] = [],
        hide_node_key: bool = False,
        node_kv: str = " ",
        exclude_edge_keys: List[str] = [],
        hide_edge_key: bool = False,
        edge_kv: str = " ",
    ) -> Digraph: ...
    @abstractmethod
    def fetch_ids_from_db(self) -> List[str]: ...
    @abstractmethod
    def search_indegree_edges(self, target: Any) -> List[Any]: ...
    @abstractmethod
    def search_outdegree_edges(self, source: Any) -> List[Any]: ...
    @abstractmethod
    def search_similar_nodes(self, embed_id, *, desc: bool, sort_by: str): ...
    @abstractmethod
    def search_similar_edges(self, embed_id, *, desc: bool, sort_by: str): ...
